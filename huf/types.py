import typing as tp

import jax
import jax.numpy as jnp

import haiku as hk

Activation = tp.Callable[[jnp.ndarray], jnp.ndarray]
PRNGKey = jnp.ndarray  # presumably generated by jax.random.PRNGKey
Seed = int

Inputs = tp.Any
Labels = tp.Any
Preds = tp.Any
SampleWeight = tp.Any
Params = tp.Any
State = tp.Any

Metrics = tp.Mapping[str, tp.Any]


class Example(tp.NamedTuple):
    inputs: Inputs
    labels: tp.Optional[Labels]
    sample_weight: tp.Optional[SampleWeight]


class ModelState(tp.NamedTuple):
    params: tp.Any
    net_state: tp.Any
    opt_state: tp.Any


class FitState(tp.NamedTuple):
    epochs: int
    rng: PRNGKey
    model_state: ModelState
    train_metrics: tp.Optional[Metrics]
    validation_metrics: tp.Optional[Metrics]


MetricFactory = tp.Callable[[], hk.Module]

AbstractTree = tp.Union[
    jax.core.AbstractValue, tp.Tuple["AbstractTree"], tp.Mapping[str, "AbstractTree"]
]


class ModelSpec(tp.NamedTuple):
    inputs: AbstractTree
    labels: tp.Optional[AbstractTree]
    sample_weight: tp.Optional[AbstractTree]
    preds: AbstractTree
    metrics: AbstractTree
    params: AbstractTree
    net_state: AbstractTree
    opt_state: AbstractTree
    metrics_state: AbstractTree
